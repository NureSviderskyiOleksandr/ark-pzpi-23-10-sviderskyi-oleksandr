МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмна інженерія»






ЗВІТ
з практичної роботи
з дисципліни «Аналіз та рефакторінг коду»
на тему «Основні рекомендації написання коду для обраної мови програмування»







Виконав:                                                           	     Перевірив:
ст. гр. ПЗПІ-23-10                                                       старший викл. Кафедри ПІ
Свідерський О. Г.                                                        Сокорчук І. П.




Харків 2025
1. ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень120.10.250.1Створено документ, розділи “Історія змін”, “Завдання” та “Опис виконаної роботи”321.10.250.2Створено розділи “Висновки”,
“Список використаних джерел”, 322.10.251.0Створено додатки а, б, в.


2. ЗАВДАННЯ 
    Метою даної роботи є ознайомлення з основними принципами написання якісного та читабельного коду мовою програмування Ruby, а також формування навичок застосування стандартів стилю та оформлення програмного коду відповідно до сучасних практик розробки.


3. ОПИС ВИКОНАНОЇ РОБОТИ 
      Під час виконання роботи було створено презентацію на тему «Основні рекомендації написання коду для мови програмування Ruby», у якій послідовно викладено ключові принципи стилю програмування та правила оформлення програмного коду відповідно до стандартів спільноти Ruby.
      Робота розпочинається з викладення основних принципів створення якісного програмного коду. Мова Ruby орієнтована на зрозумілість і логічність, тому головною метою розробника є написання такого коду, який легко читати й аналізувати не лише автору, а й іншим учасникам команди. У цьому контексті акцент зроблено на важливості дотримання чистоти, акуратності, структурованості та узгодженості в межах одного стилю.
      Перший розділ присвячено питанню читабельного стилю написання коду. Пояснено, що Ruby була створена як мова, зручна для людини, тому форматування, відступи, правильне розбиття коду на рядки й узгоджене розташування елементів у програмі є не лише питанням естетики, а й необхідною умовою підтримуваності проєкту. Особливу увагу приділено правилам розміщення відступів, дотриманню однакової кількості пробілів і правильному оформленню операторів.
      Другий розділ описує правила іменування змінних, методів, класів і модулів. У Ruby прийнято дотримуватись чіткої нотації: для змінних і методів використовується стиль snake_case, а для класів і модулів — CamelCase. Такий підхід забезпечує послідовність і дозволяє уникати плутанини. У презентації наголошено, що правильне іменування має важливе значення для розуміння логіки програми: воно допомагає передати сенс змінних і дій у методах без додаткових коментарів.
      Далі розглянуто принцип мінімалізму у програмуванні. Ruby відома своєю виразністю, тому її синтаксис дозволяє скорочувати код без втрати зрозумілості. Підкреслено, що не варто перевантажувати програму надмірними перевірками, умовами чи дублюванням інструкцій. Мінімалістичний підхід сприяє створенню короткого, але логічного та зручного для читання коду, що відповідає духу мови Ruby.
      Наступний розділ присвячений використанню символів (symbols) замість рядків як ключів у структурах даних. Символи у Ruby мають вищу продуктивність і споживають менше пам’яті, оскільки є незмінними об’єктами. Такий підхід забезпечує оптимізацію ресурсів програми й підвищує швидкодію, особливо у великих проектах. У презентації пояснюється різниця між символами та рядками, а також наводяться рекомендації щодо вибору правильного типу даних залежно від контексту.
      Окремо розкрито тему відступів і форматування коду. Підкреслено, що стандартним підходом у Ruby є використання двох пробілів для кожного рівня вкладеності. Дотримання цього правила робить структуру програми чіткою та зручною для візуального сприйняття. Завдяки такому форматуванню інші розробники можуть швидко зрозуміти логіку виконання, навіть не знаючи деталей реалізації.
      Далі у презентації розглядається важливий принцип DRY (Don’t Repeat Yourself), який закликає уникати дублювання коду. Підкреслено, що повторювані частини необхідно винести у спільні методи або функції. Це зменшує ймовірність помилок, спрощує тестування і підвищує зручність подальшої модифікації програми. Такий підхід формує культуру ефективного програмування, де кожна частина коду має одне чітке призначення.
      Наступна частина роботи присвячена використанню блоків і вбудованих ітераторів. Ruby пропонує розвинену систему блоків, які дають змогу обробляти колекції даних коротко та елегантно. Замість традиційних циклів, що часто ускладнюють структуру програми, рекомендовано застосовувати методи each, map, select та інші подібні конструкції. Вони забезпечують кращу читабельність, зменшують кількість допоміжних змінних і роблять код ближчим до природної мови.
      Окремий розділ стосується написання коментарів. Пояснюється, що коментарі мають пояснювати не очевидне — тобто не описувати дії, які й так зрозумілі з коду, а роз’яснювати логіку прийнятих рішень, особливості реалізації або причини відхилення від стандартних підходів. Грамотне коментування дозволяє полегшити спільну розробку, робить програму більш прозорою і зрозумілою для нових учасників проекту.
      Дев’ятий розділ зосереджується на обробці помилок у Ruby. Мова надає розробникам гнучкий механізм для роботи з виключеннями за допомогою конструкції begin...rescue. Такий підхід дозволяє уникнути аварійного завершення програми й забезпечує стабільність її роботи навіть у разі виникнення непередбачених ситуацій. Правильне використання обробки помилок сприяє підвищенню надійності програмного забезпечення й полегшує діагностику проблем.
      Завершується робота висновком, у якому підсумовано основні ідеї. Ruby — це мова, яка заохочує елегантність, простоту та логічність у написанні коду. Дотримання стилістичних норм, таких як правила іменування, форматування, використання символів, блоків та ітераторів, формує професійний підхід до розробки програм. Підкреслюється, що хороший стиль — це не формальність, а частина культури програміста, що визначає якість програмного продукту.
      Таким чином, під час виконання роботи було опрацьовано всі ключові аспекти оформлення програмного коду в Ruby — від форматування та коментування до ефективного використання синтаксичних конструкцій і принципів оптимізації. Результатом стало глибоке розуміння не лише технічних вимог до коду, а й загальної філософії Ruby як мови, яка поєднує простоту, естетику та логічність.
4. ВИСНОВКИ
      У результаті виконаної роботи було розглянуто основні правила написання та оформлення коду мовою Ruby. Детально вивчено стилістичні норми та підходи до створення чистого, структурованого й зрозумілого програмного коду.
      Отримано практичні навички щодо застосування принципів DRY, правильного іменування змінних і класів, роботи з символами, використання блоків та ітераторів, а також ефективного коментування коду.
      Під час підготовки презентації вдалося зрозуміти, що дотримання стилю — це не формальність, а важлива складова професійної культури програміста. Саме акуратний, лаконічний та передбачуваний код є запорукою якісного програмного продукту, зручного для командної розробки та подальшої підтримки.


5. СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ 
1. Офіційна документація Ruby​ URL: https://ruby-doc.org​ (date of access: 01.10.2025).
2. Ruby Style Guide URL: https://rubystyle.guide​ (last updated: 10.10.2025).
3. Ruby в документації від Launch School URL: https://launchschool.com/books/ruby ​ 2025. 
4. Документація Ruby on Rails URL: https://guides.rubyonrails.org​ (release notes for: 03.10.2025).



ДОДАТОК А 
Відеозапис 
Відеозапис доповіді: https://www.youtube.com/watch?v=pdOvN7k-GMs&feature=youtu.be 

Хронологічний опис відеозапису: 
0:00 – Вступ  
0:25 – Мета роботи  
1:07 – Читебальний стиль  
1:47 – Іменування
2:15 – Приклад іменування змінних і методів
2:54 – Уникайте зайвого коду 
3:33 – Символи замість рядків  
4:31 – Відступи та форматування  
5:11 – Don’t Repeat Yourself  
6:01 – Блоки each, map, select  
7:09 – Коментарі  
7:59 – begin-rescue  
8:32 – Висновки  


ДОДАТОК Б 
Слайди презентації 
Рисунок Б.1 – Титульний аркуш

Рисунок Б.2 – Основні принципи

 Рисунок Б.3 – Читабельний стиль написання

 Рисунок Б.3 – Іменування

 Рисунок Б.4 – Іменування, приклад

 Рисунок Б.5 – Уникайте зайвого коду

 Рисунок Б.6 – Символи замість рядків, як ключі

 Рисунок Б.7 – Відступи та форматування


Рисунок Б.8 – Don’t Repeat Yourself


Рисунок Б.9 – Блоки each, map, select


Рисунок Б.10 – Коментарі


Рисунок Б.11 – Обробка помилок


Рисунок Б.12 – Висновок


Рисунок Б.13 – Джерела



ДОДАТОК В 
Програмний код 
В.1 Читабельний стиль коду
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  def hi(name) puts"Hello,#{name}!"end
3
4  # Добре
5  def hi(name)
6    puts "Hello, #{name}!"
7  end

В.2 Іменування: snake_case для змінних і методів, CamelCase для класів
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  userName = "Olena"
3  def PrintMessage; end
4  class userprofile; end
5
6  # Добре
7  user_name = "Olena"
8
9  def print_message
10   puts "Hello!"
11  end
12
13  class UserProfile
14  end


В.3 Уникайте зайвого коду
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  if is_admin == true
3    puts "Welcome, admin!"
4  end
5
6  # Добре
7  puts "Welcome, admin!" if is_admin

В.4 Використовуйте символи замість рядків як ключі
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  user = { "name" => "Alex", "age" => 19 }
3
4  # Добре
5  user = { name: "Alex", age: 19 }
6
7  # :name та :age — це символи, вони займають менше пам'яті та зручніші як ключі хешів.



В.5 Відступи та форматування (2 пробіли, не табуляція)
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  def greet(name)
3  if name
4  puts "Hi, #{name}!"
5  else
6  puts "Hi, stranger!"
7  end
8  end
9
10 # Добре
11 def greet(name)
12   if name
13     puts "Hi, #{name}!"
14   else
15     puts "Hi, stranger!"
16   end
17 end



В.6 DRY (Don't Repeat Yourself) — не повторюй себе
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  puts "Hello, Dmytro!"
3  puts "Hello, Olena!"
4  puts "Hello, Oksana!"
5
6  # Добре
7  def greet(name)
8    puts "Hello, #{name}!"
9  end
10
11 ["Dmytro", "Olena", "Oksana"].each { |name| greet(name) }

В.7 Використовуйте each, map, select замість for
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  for i in 0..4
3    puts i
4  end
5
6  # Добре
7  (0..4).each { |i| puts i }



В.8 Коментарі мають пояснювати "чому", а не "що"
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Погано
2  # Виводимо привітання користувачу
3  puts "Hello, #{user.name}!"
4
5  # Добре
6  # Зберігаємо користувача в базі лише якщо він валідний
7  save_user(user) if user.valid?

В.9 Обробка помилок через begin...rescue
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  def risky_operation
2    raise "Test error" if rand > 0.5
3    puts "Успіх!"
4  end
5
6  begin
7    risky_operation
8  rescue StandardError => e
9    puts "Сталася помилка: #{e.message}"
10  end



В.10 Приклад узагальнення (завершення презентації)
GitHub репозиторій: https://github.com/NureSviderskyiOleksandr/ark-pzpi-23-10-sviderskyi-oleksandr/blob/main/Pract1/pzpi-23-10-sviderskyi-oleksandr-pract1/code-examples-code-conventions.rb
1  # Клас користувача
2  class User
3    attr_reader :name, :age, :role
4
5    def initialize(name:, age:, role:)
6      @name = name
7      @age = age
8      @role = role
9    end
10
11   # Метод перевіряє, чи є користувач адміністратором
12   def admin?
13     role == :admin
14   end
15
16   # Привітання користувача
17   def greet
18     puts "Hello, #{name}! (#{role.capitalize})"
19   end
20  end
21
22  # Константа — приклад уникнення "магічних чисел"
23  MIN_ADULT_AGE = 18
24
25  # Створюємо список користувачів (ключі як символи)
26  users = [
27    User.new(name: "Olena", age: 25, role: :admin),
28    User.new(name: "Dmytro", age: 17, role: :guest),
29    User.new(name: "Oksana", age: 30, role: :member)
30  ]
31
32  # Функція для перевірки віку користувача
33  def adult?(user)
34    user.age >= MIN_ADULT_AGE
35  end
36
37  # Вивід користувачів, які є повнолітніми
38  puts "\n=== Повнолітні користувачі ==="
39  users.select { |u| adult?(u) }.each(&:greet)
40
41  # Використання блоку map для отримання імен користувачів
42  user_names = users.map(&:name)
43  puts "\nУсі користувачі: #{user_names.join(', ')}"
44
45  # Демонстрація обробки помилок
46  def risky_division(a, b)
47    raise ZeroDivisionError, "Ділення на нуль!" if b.zero?
48    a / b
49  end
50
51  begin
52    puts "\nРезультат ділення: #{risky_division(10, 0)}"
53  rescue StandardError => e
54    puts "⚠️  Помилка під час виконання: #{e.message}"
55  end

2


